import { Resend } from 'resend'
import twilio from 'twilio'

// Resend Email Client
export const resend = new Resend(process.env.RESEND_API_KEY!)

// Twilio SMS Client
export const twilioClient = twilio(
  process.env.TWILIO_ACCOUNT_SID!,
  process.env.TWILIO_AUTH_TOKEN!
)

// Email Templates
export const emailTemplates = {
  // Audit Complete Email
  auditComplete: (businessName: string, score: number, reportUrl: string) => ({
    from: process.env.RESEND_FROM_EMAIL!,
    subject: `üçú TableTalk Radar: ${businessName} Audit Complete (Score: ${score}/100)`,
    html: `
      <div style="font-family: 'Inter', Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
        <div style="background: linear-gradient(135deg, #8B0000 0%, #DC143C 100%); color: white; padding: 30px; border-radius: 12px; text-align: center; margin-bottom: 30px;">
          <h1 style="margin: 0; font-size: 28px; font-weight: 700;">TableTalk Radar</h1>
          <p style="margin: 10px 0 0; font-size: 16px; opacity: 0.9;">AI-Powered Restaurant Intelligence</p>
        </div>
        
        <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
          <h2 style="color: #2d3748; margin-top: 0;">Audit Complete for ${businessName}</h2>
          <div style="font-size: 24px; font-weight: bold; color: ${score >= 80 ? '#38a169' : score >= 60 ? '#f59e0b' : '#ef4444'}; margin: 15px 0;">
            Overall Score: ${score}/100
          </div>
        </div>
        
        <div style="margin: 30px 0;">
          <h3 style="color: #2d3748;">Your 5-AI Analysis is Ready</h3>
          <ul style="color: #4a5568; line-height: 1.6;">
            <li>üîç <strong>Perplexity:</strong> Market research & competitor analysis</li>
            <li>üõ†Ô∏è <strong>Kimi:</strong> Technical SEO & website performance</li>
            <li>üçΩÔ∏è <strong>Claude:</strong> Restaurant industry expertise</li>
            <li>üí¨ <strong>OpenAI:</strong> Customer sentiment analysis</li>
            <li>üåê <strong>Gemini:</strong> Google ecosystem optimization</li>
          </ul>
        </div>
        
        <div style="text-align: center; margin: 40px 0;">
          <a href="${reportUrl}" style="background: #8B0000; color: white; padding: 15px 30px; text-decoration: none; border-radius: 8px; font-weight: 600; display: inline-block;">
            View Full Report
          </a>
        </div>
        
        <div style="border-top: 1px solid #e2e8f0; padding-top: 20px; margin-top: 30px; text-align: center; color: #718096; font-size: 14px;">
          <p>This report was generated by TableTalk Radar's 5-AI analysis engine.</p>
          <p>¬© ${new Date().getFullYear()} TableTalk Radar. All rights reserved.</p>
        </div>
      </div>
    `
  }),

  // Weekly Performance Report
  weeklyReport: (businessName: string, scoreChange: number, keyInsights: string[]) => ({
    from: process.env.RESEND_FROM_EMAIL!,
    subject: `üìä Weekly Report: ${businessName} Performance Update`,
    html: `
      <div style="font-family: 'Inter', Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
        <div style="background: linear-gradient(135deg, #8B0000 0%, #DC143C 100%); color: white; padding: 30px; border-radius: 12px; text-align: center; margin-bottom: 30px;">
          <h1 style="margin: 0; font-size: 24px; font-weight: 700;">Weekly Performance Report</h1>
          <p style="margin: 10px 0 0; font-size: 16px; opacity: 0.9;">${businessName}</p>
        </div>
        
        <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
          <div style="font-size: 20px; font-weight: bold; color: ${scoreChange > 0 ? '#38a169' : scoreChange < 0 ? '#ef4444' : '#4a5568'};">
            Score Change: ${scoreChange > 0 ? '+' : ''}${scoreChange} points
          </div>
        </div>
        
        <div style="margin: 30px 0;">
          <h3 style="color: #2d3748;">Key Insights This Week</h3>
          <ul style="color: #4a5568; line-height: 1.6;">
            ${keyInsights.map(insight => `<li>${insight}</li>`).join('')}
          </ul>
        </div>
        
        <div style="text-align: center; margin: 40px 0;">
          <a href="#" style="background: #8B0000; color: white; padding: 15px 30px; text-decoration: none; border-radius: 8px; font-weight: 600; display: inline-block;">
            View Dashboard
          </a>
        </div>
      </div>
    `
  }),

  // Critical Alert Email
  criticalAlert: (businessName: string, alertType: string, details: string) => ({
    from: process.env.RESEND_FROM_EMAIL!,
    subject: `üö® URGENT: ${businessName} - ${alertType}`,
    html: `
      <div style="font-family: 'Inter', Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
        <div style="background: #ef4444; color: white; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
          <h1 style="margin: 0; font-size: 24px;">üö® Critical Alert</h1>
          <p style="margin: 10px 0 0; font-size: 18px; font-weight: 600;">${businessName}</p>
        </div>
        
        <div style="background: #fef2f2; border-left: 4px solid #ef4444; padding: 20px; margin-bottom: 20px;">
          <h3 style="color: #dc2626; margin-top: 0;">${alertType}</h3>
          <p style="color: #7f1d1d;">${details}</p>
        </div>
        
        <div style="background: #f0f9ff; padding: 15px; border-radius: 8px;">
          <p style="margin: 0; color: #1e40af;"><strong>Recommendation:</strong> Immediate attention required. Login to your dashboard to take action.</p>
        </div>
      </div>
    `
  })
}

// SMS Templates
export const smsTemplates = {
  criticalAlert: (businessName: string, alertType: string) => 
    `üö® TableTalk Alert: ${businessName} - ${alertType}. Check your email for details or login to dashboard.`,
    
  newReview: (businessName: string, rating: number, platform: string) =>
    `‚≠ê New ${rating}-star review for ${businessName} on ${platform}. View and respond: [link]`,
    
  scoreImprovement: (businessName: string, newScore: number, oldScore: number) =>
    `üìà Great news! ${businessName} score improved from ${oldScore} to ${newScore}. Keep it up!`
}

// Communication Functions
export const communications = {
  // Send Email
  async sendEmail(to: string, template: any) {
    try {
      const { data, error } = await resend.emails.send({
        ...template,
        to: [to]
      })

      if (error) {
        throw new Error(`Email sending failed: ${error.message}`)
      }

      return { success: true, data }
    } catch (error) {
      console.error('Email sending error:', error)
      return { success: false, error }
    }
  },

  // Send SMS
  async sendSMS(to: string, message: string) {
    try {
      const result = await twilioClient.messages.create({
        body: message,
        from: process.env.TWILIO_PHONE_NUMBER!,
        to
      })

      return { success: true, data: result }
    } catch (error) {
      console.error('SMS sending error:', error)
      return { success: false, error }
    }
  },

  // Send Audit Complete Notification
  async sendAuditComplete(email: string, phone: string | null, businessName: string, score: number, reportUrl: string) {
    const emailResult = await this.sendEmail(
      email, 
      emailTemplates.auditComplete(businessName, score, reportUrl)
    )

    let smsResult = null
    if (phone && score < 70) {
      // Send SMS only for low scores requiring immediate attention
      smsResult = await this.sendSMS(
        phone,
        `üìä ${businessName} audit complete. Score: ${score}/100. Check email for full report.`
      )
    }

    return { email: emailResult, sms: smsResult }
  },

  // Send Critical Alert
  async sendCriticalAlert(email: string, phone: string | null, businessName: string, alertType: string, details: string) {
    const emailResult = await this.sendEmail(
      email,
      emailTemplates.criticalAlert(businessName, alertType, details)
    )

    let smsResult = null
    if (phone) {
      smsResult = await this.sendSMS(
        phone,
        smsTemplates.criticalAlert(businessName, alertType)
      )
    }

    return { email: emailResult, sms: smsResult }
  },

  // Send Weekly Report
  async sendWeeklyReport(email: string, businessName: string, scoreChange: number, keyInsights: string[]) {
    return await this.sendEmail(
      email,
      emailTemplates.weeklyReport(businessName, scoreChange, keyInsights)
    )
  }
}